// source: ebay_connector.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ebay_connector.AddStoreReply', null, global);
goog.exportSymbol('proto.ebay_connector.AddStoreReq', null, global);
goog.exportSymbol('proto.ebay_connector.parameters', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ebay_connector.parameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ebay_connector.parameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ebay_connector.parameters.displayName = 'proto.ebay_connector.parameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ebay_connector.AddStoreReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ebay_connector.AddStoreReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ebay_connector.AddStoreReq.displayName = 'proto.ebay_connector.AddStoreReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ebay_connector.AddStoreReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ebay_connector.AddStoreReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ebay_connector.AddStoreReply.displayName = 'proto.ebay_connector.AddStoreReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ebay_connector.parameters.prototype.toObject = function(opt_includeInstance) {
  return proto.ebay_connector.parameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ebay_connector.parameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.parameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    ebaySiteId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ebay_connector.parameters}
 */
proto.ebay_connector.parameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ebay_connector.parameters;
  return proto.ebay_connector.parameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ebay_connector.parameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ebay_connector.parameters}
 */
proto.ebay_connector.parameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEbaySiteId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ebay_connector.parameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ebay_connector.parameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ebay_connector.parameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.parameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEbaySiteId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 ebay_site_id = 1;
 * @return {number}
 */
proto.ebay_connector.parameters.prototype.getEbaySiteId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ebay_connector.parameters} returns this
 */
proto.ebay_connector.parameters.prototype.setEbaySiteId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ebay_connector.AddStoreReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ebay_connector.AddStoreReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ebay_connector.AddStoreReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.AddStoreReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    companyId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shortName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    iconColour: jspb.Message.getFieldWithDefault(msg, 5, ""),
    storeUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    parameters: (f = msg.getParameters()) && proto.ebay_connector.parameters.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 8, ""),
    importAllOrders: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    importAllProducts: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ebay_connector.AddStoreReq}
 */
proto.ebay_connector.AddStoreReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ebay_connector.AddStoreReq;
  return proto.ebay_connector.AddStoreReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ebay_connector.AddStoreReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ebay_connector.AddStoreReq}
 */
proto.ebay_connector.AddStoreReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIconColour(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreUrl(value);
      break;
    case 7:
      var value = new proto.ebay_connector.parameters;
      reader.readMessage(value,proto.ebay_connector.parameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImportAllOrders(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImportAllProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ebay_connector.AddStoreReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ebay_connector.AddStoreReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ebay_connector.AddStoreReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.AddStoreReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompanyId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShortName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIconColour();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStoreUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ebay_connector.parameters.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getImportAllOrders();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getImportAllProducts();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string company_id = 3;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getCompanyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string short_name = 4;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getShortName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setShortName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string icon_colour = 5;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getIconColour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setIconColour = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string store_url = 6;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getStoreUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setStoreUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional parameters parameters = 7;
 * @return {?proto.ebay_connector.parameters}
 */
proto.ebay_connector.AddStoreReq.prototype.getParameters = function() {
  return /** @type{?proto.ebay_connector.parameters} */ (
    jspb.Message.getWrapperField(this, proto.ebay_connector.parameters, 7));
};


/**
 * @param {?proto.ebay_connector.parameters|undefined} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
*/
proto.ebay_connector.AddStoreReq.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ebay_connector.AddStoreReq.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string code = 8;
 * @return {string}
 */
proto.ebay_connector.AddStoreReq.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool import_all_orders = 9;
 * @return {boolean}
 */
proto.ebay_connector.AddStoreReq.prototype.getImportAllOrders = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setImportAllOrders = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool import_all_products = 10;
 * @return {boolean}
 */
proto.ebay_connector.AddStoreReq.prototype.getImportAllProducts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ebay_connector.AddStoreReq} returns this
 */
proto.ebay_connector.AddStoreReq.prototype.setImportAllProducts = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ebay_connector.AddStoreReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ebay_connector.AddStoreReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ebay_connector.AddStoreReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.AddStoreReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    storeid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ebay_connector.AddStoreReply}
 */
proto.ebay_connector.AddStoreReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ebay_connector.AddStoreReply;
  return proto.ebay_connector.AddStoreReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ebay_connector.AddStoreReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ebay_connector.AddStoreReply}
 */
proto.ebay_connector.AddStoreReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ebay_connector.AddStoreReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ebay_connector.AddStoreReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ebay_connector.AddStoreReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ebay_connector.AddStoreReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoreid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string StoreID = 1;
 * @return {string}
 */
proto.ebay_connector.AddStoreReply.prototype.getStoreid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ebay_connector.AddStoreReply} returns this
 */
proto.ebay_connector.AddStoreReply.prototype.setStoreid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.ebay_connector);
